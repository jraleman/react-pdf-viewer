{"version":3,"sources":["i18n.ts","components/PdfViewer.tsx","assets/sample.pdf","assets/the_little_prince.pdf","components/InputsController.tsx","components/SettingsController.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["resources","en","translation","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","DisplayError","DisplayLoading","DisplayNoData","DocumentController","styled","div","StyledButton","button","PageIndicator","p","DocumentWrapper","PdfViewer","pdfPath","timeout","opacity","disableCopy","scale","rotate","maxPages","undefined","useState","hide","setHide","numPages","setNumPages","pageNumber","setPageNumber","t","useTranslation","useEffect","setTimeout","preventCtxMenu","event","preventDefault","document","addEventListener","removeEventListener","userSelect","prevBtnLabel","nextBtnLabel","pageIndicatorLabel","onClick","n","style","file","error","loading","noData","onLoadSuccess","page","console","log","InputContainer","InputsController","inputs","map","key","type","label","value","onChange","disabled","min","max","htmlFor","name","SaveButton","SettingsTitle","h3","SettingsContainer","SettingsController","onSave","setPdfPath","pdfTimeout","setPdfTimeout","pdfOpacity","setPdfOpacity","pdfScale","setPdfScale","pdfRotate","setPdfRotate","setMaxPages","setDisableCopy","inputsArr","e","target","Number","checked","titleLabel","saveButtonLabel","path","pdfjs","GlobalWorkerOptions","workerSrc","pdfjsWorker","Container","CodePreview","code","WidgetWrapper","WidgetTitle","h2","App","pdfLittlePrince","pdfSample","pdfProps","setPdfProps","appTitleLabel","savedProps","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ed6595f7.chunk.js","sourcesContent":["import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport en from './lang/en.json';\n\nconst resources = {\n  en: { translation: { ...en } },\n};\n\ni18n\n  .use(initReactI18next)\n  .init({\n    resources,\n    lng: 'en',\n    interpolation: {\n      escapeValue: false\n    }\n  });\n\n  export default i18n;","import { useEffect, useState, MouseEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport styled from 'styled-components';\nimport { Document, Page, PDFPageProxy } from 'react-pdf';\nimport IPdfViewer from '../@interfaces/IPdfViewer';\n\nconst PdfViewer = ({ \n    pdfPath = '',\n    timeout = 0,\n    opacity = 1.0,\n    disableCopy = false,\n    scale = 1.0,\n    rotate = 0,\n    maxPages = undefined,\n}: IPdfViewer) => {\n    const [hide, setHide] = useState<boolean>(false);\n    const [numPages, setNumPages] = useState<number>(1);\n    const [pageNumber, setPageNumber] = useState<number>(1);\n    const { t } = useTranslation();\n\n    const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {\n        setNumPages(maxPages || numPages);\n    };\n\n    const handleNextPage = () => {\n        if (numPages && numPages > pageNumber) {\n            setPageNumber((n) => n += 1);\n        }\n    };\n\n    const handlePrevPage = () => {\n        if (pageNumber > 1) {\n            setPageNumber((n) => n -= 1);\n        }\n    };\n\n    const handleOnClick = (event: MouseEvent, page: PDFPageProxy) => {\n        if (disableCopy) {\n            event.preventDefault();\n            console.log('You shall not copy', { page });\n        }\n    };\n\n    useEffect(() => {\n        if (timeout) {\n            const seconds = timeout * 1000;\n            setTimeout(() => {\n                setHide(true);\n            }, seconds);\n        }\n    }, [timeout]);\n\n    useEffect(() => {\n        const preventCtxMenu = (event: Event) => event.preventDefault();\n        disableCopy && document.addEventListener('contextmenu', preventCtxMenu);\n        return () => {\n            disableCopy && document.removeEventListener('contextmenu', preventCtxMenu);\n        }\n    }, [disableCopy])\n\n    const userSelect = disableCopy ? 'none' : 'auto';\n    const prevBtnLabel = t('pagePrevious');\n    const nextBtnLabel = t('pageNext');\n    const pageIndicatorLabel = t('pageIndicator', { pageNumber, numPages });\n    if (hide) {\n        return null;\n    }\n    return (\n        <>\n            <DocumentController>\n                <PageIndicator>{pageIndicatorLabel}</PageIndicator>\n                <StyledButton onClick={handlePrevPage}>{prevBtnLabel}</StyledButton>\n                <StyledButton onClick={handleNextPage}>{nextBtnLabel}</StyledButton>\n            </DocumentController>\n            <DocumentWrapper style={{ opacity, userSelect }}>\n                <Document\n                    file={pdfPath}\n                    rotate={rotate}\n                    error={DisplayError}\n                    loading={DisplayLoading}\n                    noData={DisplayNoData}\n                    onLoadSuccess={onDocumentLoadSuccess}\n                >\n                <Page scale={scale} pageNumber={pageNumber} onClick={handleOnClick} />\n                </Document>\n            </DocumentWrapper>\n        </>\n    );\n};\n\nconst DisplayError = () => <div>An error has occured!</div>\n\nconst DisplayLoading = () => <div>Loading... please wait</div>\n\nconst DisplayNoData = () => <div>Not found!</div>\n\nconst DocumentController = styled.div``;\n\nconst StyledButton = styled.button`\n    overflow: visible;\n    margin: 0;\n    background: transparent;\n    font: inherit;\n    line-height: normal;\n    cursor: pointer;\n    text-decoration: none;\n    text-transform: uppercase;\n    padding: 16px 36px 22px;\n    background-color: #fff;\n    color: #666;\n    border: 2px solid #666;\n    border-radius: 6px;\n    margin-bottom: 16px;\n    :hover {\n        opacity: 0.75;\n    }\n`;\n\nconst PageIndicator = styled.p`\n    text-transform: uppercase;\n    font-weight: 500;\n`;\n\nconst DocumentWrapper = styled.div`\n    div {\n        div {\n            canvas {\n                margin: 0 auto;\n            }\n        }\n    }\n`;\n\nexport default PdfViewer;\n","export default __webpack_public_path__ + \"static/media/sample.ac0398d4.pdf\";","export default __webpack_public_path__ + \"static/media/the_little_prince.5ca0ffd2.pdf\";","import styled from 'styled-components';\nimport IInputsController from \"../@interfaces/IInputsController\";\n\nconst InputsController = ({ inputs }: { inputs: IInputsController[] }) => (\n    <> \n        {inputs.map(({\n            key,\n            type,\n            label,\n            value,\n            onChange,\n            disabled,\n            min,\n            max,\n        }) => (\n            <InputContainer key={key}>\n                <label htmlFor={key}>{label}</label>\n                <input \n                    name={key}\n                    type={type}\n                    value={value}\n                    onChange={onChange}\n                    disabled={disabled}\n                    min={min}\n                    max={max}\n                />\n            </InputContainer>\n        ))}\n    </>\n);\n\nconst InputContainer = styled.div`\n    margin: 2em;\n    label {\n        display: inline-block;\n        text-align: left;\n        font-weight: 600;\n        width: 100%;\n    }\n    input {\n        width: 50%;\n    }\n`;\n\nexport default InputsController;\n","import { ChangeEvent, useState } from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport InputsController from './InputsController';\nimport ISettingsController from '../@interfaces/ISettingsController';\nimport IInputsController from '../@interfaces/IInputsController';\n\nconst SettingsController = ({ onSave = () => {} }: ISettingsController) => {\n    const [pdfPath, setPdfPath] = useState<string>('');\n    const [pdfTimeout, setPdfTimeout] = useState<number | undefined>(undefined);\n    const [pdfOpacity, setPdfOpacity] = useState<number>(1.0);\n    const [pdfScale, setPdfScale] = useState<number>(1.0);\n    const [pdfRotate, setPdfRotate] = useState<number>(0);\n    const [maxPages, setMaxPages] = useState<number | undefined>(undefined);\n    const [disableCopy, setDisableCopy] = useState<boolean>(false);\n    const { t } = useTranslation();\n    \n    const handleOnSave = () => {\n        onSave({\n            path: pdfPath,\n            timeout: pdfTimeout,\n            opacity: pdfOpacity,\n            scale: pdfScale,\n            rotate: pdfRotate,\n            disableCopy,\n            maxPages,\n        });\n    };\n\n    const inputsArr: IInputsController[] = [\n        {\n            key: 'pdf-path',\n            type: 'file',\n            label: t('pdfPathInput'),\n            value: pdfPath,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setPdfPath(e.target.value),\n            disabled: true,\n        },\n        {\n            key: 'pdf-timeout',\n            type: 'number',\n            label:  t('timeoutInput'),\n            value: pdfTimeout,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setPdfTimeout(Number(e.target.value)),\n        },\n        {\n            key: 'pdf-opacity',\n            type: 'range',\n            label:  t('opacityInput'),\n            value: pdfOpacity,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setPdfOpacity(Number(e.target.value)),\n            min: 0,\n            max: 10,\n        },\n        {\n            key: 'pdf-scale',\n            type: 'range',\n            label: t('scaleInput'),\n            value: pdfScale,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setPdfScale(Number(e.target.value)),\n            min: 1,\n            max: 100,\n        },\n        {\n            key: 'pdf-rotate',\n            type: 'number',\n            label: t('rotateInput'),\n            value: pdfRotate,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setPdfRotate(Number(e.target.value)),\n        },\n        {\n            key: 'max-pages',\n            type: 'number',\n            label: t('maxPagesInput'),\n            value: maxPages,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setMaxPages(Number(e.target.value)),\n        },\n        {\n            key: 'disable-copy',\n            type: 'checkbox',\n            label: t('disableCopyInput'),\n            value: `${disableCopy}`,\n            onChange: (e: ChangeEvent<HTMLInputElement>) => setDisableCopy(e.target.checked),\n        },\n    ];\n\n    const titleLabel = t('settingsTitle');\n    const saveButtonLabel = t('saveSettings');\n    return (\n        <SettingsContainer>\n            <hr />\n            <SettingsTitle>{titleLabel}</SettingsTitle>\n            <InputsController inputs={inputsArr} />\n            <SaveButton onClick={handleOnSave} disabled>\n                {saveButtonLabel}\n            </SaveButton>\n        </SettingsContainer>\n    );\n};\n\nconst SaveButton = styled.button`\n    overflow: visible;\n    margin: 0;\n    background: transparent;\n    font: inherit;\n    line-height: normal;\n    cursor: pointer;\n    text-decoration: none;\n    text-transform: uppercase;\n    padding: 16px 36px 22px;\n    background-color: #fff;\n    color: #666;\n    border: 2px solid #666;\n    border-radius: 6px;\n    margin-bottom: 16px;\n    :hover {\n        opacity: 0.75;\n    }\n`;\n\nconst SettingsTitle = styled.h3`\n    color: #666666;\n`;\n\nconst SettingsContainer = styled.div``;\n\nexport default SettingsController;\n","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { pdfjs } from 'react-pdf';\n// @ts-ignore\nimport pdfjsWorker from 'react-pdf/node_modules/pdfjs-dist/build/pdf.worker.entry';\nimport PdfViewer from './components/PdfViewer';\nimport pdfSample from './assets/sample.pdf';\nimport pdfLittlePrince from './assets/the_little_prince.pdf';\nimport IPdfViewer from './@interfaces/IPdfViewer';\nimport SettingsController from './components/SettingsController';\n\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nconst App = () => {\n    const [pdfProps, setPdfProps] = useState<IPdfViewer>({\n        pdfPath: pdfLittlePrince || pdfSample,\n        timeout: 3600 / 4, // 15 mins\n        disableCopy: true,\n        // maxPages: 10,\n        rotate: 0,\n    });\n    const { t } = useTranslation();\n\n    // TODO: define PDFProps\n    const onSave = (savedProps: any) => {\n        setPdfProps({ ...savedProps });\n    };\n\n    const appTitleLabel = t('appTitle');\n    return (\n        <Container>\n            <WidgetTitle>{appTitleLabel}</WidgetTitle>\n            <WidgetWrapper>\n                <PdfViewer {...pdfProps} />\n            </WidgetWrapper>\n            <SettingsController onSave={onSave} />\n            <CodePreview>{JSON.stringify(pdfProps)}</CodePreview>\n        </Container>\n    );\n};\n\nconst Container = styled.div`\n    background-color: #afdde9;\n    text-align: center;\n    padding: 3em;\n`;\n\nconst CodePreview = styled.code`\n    padding: 1em;\n    margin-bottom: 1em;\n    color: #f9f9f9;\n    background-color: #222222;\n    display: block;\n`;\n\nconst WidgetWrapper = styled.div`\n    border-style: dotted;\n    border-color: #666666;\n    padding: 1em;\n`;\n\nconst WidgetTitle = styled.h2`\n    color: #666666;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './i18n';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}