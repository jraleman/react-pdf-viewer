{"version":3,"sources":["components/PDFViewer.tsx","assets/sample.pdf","assets/the_little_prince.pdf","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DisplayError","DisplayLoading","DisplayNoData","DocumentController","styled","div","StyledButton","button","PageIndicator","p","DocumentWrapper","PdfViewer","pdfPath","timeout","opacity","disableCopy","scale","rotate","maxPages","undefined","useState","hide","setHide","numPages","setNumPages","pageNumber","setPageNumber","useEffect","setTimeout","preventCtxMenu","event","preventDefault","document","addEventListener","removeEventListener","userSelect","onClick","n","style","file","error","loading","noData","onLoadSuccess","page","window","alert","console","log","pdfjs","GlobalWorkerOptions","workerSrc","pdfjsWorker","Container","CodePreview","code","WidgetWrapper","WidgetTitle","h2","App","pdfLittlePrince","pdfSample","pdfProps","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qWAuFMA,EAAe,kBAAM,yDAErBC,EAAiB,kBAAM,0DAEvBC,EAAgB,kBAAM,8CAEtBC,EAAqBC,IAAOC,IAAV,0BAElBC,EAAeF,IAAOG,OAAV,4aAoBZC,EAAgBJ,IAAOK,EAAV,mFAKbC,EAAkBN,IAAOC,IAAV,kIAUNM,EA7HG,SAAC,GAQA,IAAD,IAPdC,eAOc,MAPJ,GAOI,MANdC,eAMc,MANJ,EAMI,MALdC,eAKc,MALJ,EAKI,MAJdC,mBAIc,aAHdC,aAGc,MAHN,EAGM,MAFdC,cAEc,MAFL,EAEK,MADdC,gBACc,WADHC,EACG,EACd,EAAwBC,oBAAkB,GAA1C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAgCF,mBAAiB,GAAjD,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,mBAAiB,GAArD,mBAAOK,EAAP,KAAmBC,EAAnB,KA0BAC,qBAAU,WACFd,GAEJe,YAAW,WACPN,GAAQ,KAFc,IAAVT,KAKjB,CAACA,IAEJc,qBAAU,WACN,IAAME,EAAiB,SAACC,GAAD,OAAkBA,EAAMC,kBAE/C,OADAhB,GAAeiB,SAASC,iBAAiB,cAAeJ,GACjD,WACPd,GAAeiB,SAASE,oBAAoB,cAAeL,MAE5D,CAACd,IAEJ,IAAMoB,EAAapB,EAAc,OAAS,OAE1C,OAAIM,EACO,KAGP,qCACA,eAAClB,EAAD,WACI,eAACK,EAAD,mBAAoB,4BAAIiB,IAAxB,OAA2C,4BAAIF,OAC/C,cAACjB,EAAD,CAAc8B,QAxCC,WACfX,EAAa,GACjBC,GAAc,SAACW,GAAD,OAAOA,EAAK,MAsCtB,kBACA,cAAC/B,EAAD,CAAc8B,QA/CC,WACfb,GAAYA,EAAWE,GAC3BC,GAAc,SAACW,GAAD,OAAOA,EAAK,MA6CtB,qBAEJ,cAAC3B,EAAD,CAAiB4B,MAAO,CAAExB,UAASqB,cAAnC,SACI,cAAC,IAAD,CACII,KAAM3B,EACNK,OAAQA,EACRuB,MAAOxC,EACPyC,QAASxC,EACTyC,OAAQxC,EACRyC,cA5DkB,SAAC,GAAwC,IAAtCpB,EAAqC,EAArCA,SAC7BC,EAAYN,GAAYK,IAqDpB,SAQA,cAAC,IAAD,CAAMP,MAAOA,EAAOS,WAAYA,EAAYW,QA9C9B,SAACN,EAAmBc,GAClC7B,IACJe,EAAMC,iBACNc,OAAOC,MAAM,sBACbC,QAAQC,IAAI,CAAEJ,qBCtCP,MAA0B,mCCA1B,MAA0B,8CCUzCK,IAAMC,oBAAoBC,UAAYC,IAEtC,IA0BMC,EAAYjD,IAAOC,IAAV,kGAMTiD,EAAclD,IAAOmD,KAAV,qHAOXC,EAAgBpD,IAAOC,IAAV,gGAMboD,EAAcrD,IAAOsD,GAAV,+CAIFC,EAjDH,WACV,MAAgCvC,mBAAS,CACvCR,QAASgD,GAAmBC,EAC5BhD,QAAS,IACTE,aAAa,EACbG,SAAU,GACVD,OAAQ,IALV,mBAAO6C,EAAP,UAaA,OACE,eAACT,EAAD,WACE,cAACC,EAAD,UAAcS,KAAKC,UAAUF,KAE7B,cAACL,EAAD,iCACA,cAACD,EAAD,UACE,cAAC,EAAD,eAAeM,UClBRG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAAS6C,eAAe,SAM1BZ,M","file":"static/js/main.6dc2517e.chunk.js","sourcesContent":["import { useEffect, useState, MouseEvent } from 'react';\nimport styled from 'styled-components';\nimport { Document, Page, PDFPageProxy } from 'react-pdf';\nimport { IPdfViewer } from '../@interfaces/PdfViewer';\n\nconst PdfViewer = ({ \n    pdfPath = '',\n    timeout = 0,\n    opacity = 1.0,\n    disableCopy = false,\n    scale = 1.0,\n    rotate = 0,\n    maxPages = undefined,\n}: IPdfViewer) => {\n    const [hide, setHide] = useState<boolean>(false);\n    const [numPages, setNumPages] = useState<number>(1);\n    const [pageNumber, setPageNumber] = useState<number>(1);\n\n    const onDocumentLoadSuccess = ({ numPages }: { numPages: number }) => {\n        setNumPages(maxPages || numPages);\n    };\n\n    const handleNextPage = () => {\n        if (numPages && numPages > pageNumber) {\n        setPageNumber((n) => n += 1);\n        }\n    };\n\n    const handlePrevPage = () => {\n        if (pageNumber > 1) {\n        setPageNumber((n) => n -= 1);\n        }\n    };\n\n    const handleOnClick = (event: MouseEvent, page: PDFPageProxy) => {\n        if (disableCopy) {\n        event.preventDefault();\n        window.alert('You shall not copy');\n        console.log({ page });\n        }\n    };\n\n    useEffect(() => {\n        if (timeout) {\n        const seconds = timeout * 1000;\n        setTimeout(() => {\n            setHide(true);\n        }, seconds);\n        }\n    }, [timeout]);\n\n    useEffect(() => {\n        const preventCtxMenu = (event: Event) => event.preventDefault();\n        disableCopy && document.addEventListener('contextmenu', preventCtxMenu);\n        return () => {\n        disableCopy && document.removeEventListener('contextmenu', preventCtxMenu);\n        }\n    }, [disableCopy])\n\n    const userSelect = disableCopy ? 'none' : 'auto';\n\n    if (hide) {\n        return null;\n    }\n    return (\n        <>\n        <DocumentController>\n            <PageIndicator>Page <b>{pageNumber}</b> of <b>{numPages}</b></PageIndicator>\n            <StyledButton onClick={handlePrevPage}>Prev</StyledButton>\n            <StyledButton onClick={handleNextPage}>Next</StyledButton>\n        </DocumentController>\n        <DocumentWrapper style={{ opacity, userSelect }}>\n            <Document\n                file={pdfPath}\n                rotate={rotate}\n                error={DisplayError}\n                loading={DisplayLoading}\n                noData={DisplayNoData}\n                onLoadSuccess={onDocumentLoadSuccess}\n            >\n            <Page scale={scale} pageNumber={pageNumber} onClick={handleOnClick} />\n            </Document>\n        </DocumentWrapper>\n        </>\n    );\n};\n\nconst DisplayError = () => <div>An error has occured!</div>\n\nconst DisplayLoading = () => <div>Loading... please wait</div>\n\nconst DisplayNoData = () => <div>Not found!</div>\n\nconst DocumentController = styled.div``;\n\nconst StyledButton = styled.button`\n    overflow: visible;\n    margin: 0;\n    background: transparent;\n    font: inherit;\n    line-height: normal;\n    cursor: pointer;\n    text-decoration: none;\n    text-transform: uppercase;\n    padding: 16px 36px 22px;\n    background-color: #fff;\n    color: #666;\n    border: 2px solid #666;\n    border-radius: 6px;\n    margin-bottom: 16px;\n    :hover {\n        opacity: 0.75;\n    }\n`;\n\nconst PageIndicator = styled.p`\n    text-transform: uppercase;\n    font-weight: 500;\n`;\n\nconst DocumentWrapper = styled.div`\n    div {\n        div {\n        canvas {\n            margin: 0 auto;\n        }\n        }\n    }\n`;\n\nexport default PdfViewer;\n","export default __webpack_public_path__ + \"static/media/sample.ac0398d4.pdf\";","export default __webpack_public_path__ + \"static/media/the_little_prince.5ca0ffd2.pdf\";","import { useState } from 'react';\nimport styled from 'styled-components';\nimport { pdfjs } from 'react-pdf';\n// @ts-ignore\nimport pdfjsWorker from 'react-pdf/node_modules/pdfjs-dist/build/pdf.worker.entry';\nimport PdfViewer from './components/PDFViewer';\nimport pdfSample from './assets/sample.pdf';\nimport pdfLittlePrince from './assets/the_little_prince.pdf';\n// import SettingsController from './components/SettingsController';\n\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;\n\nconst App = () => {\n  const [pdfProps, setPdfProps] = useState({\n    pdfPath: pdfLittlePrince || pdfSample,\n    timeout: 3600 / 4, // 15 mins\n    disableCopy: true,\n    maxPages: 10,\n    rotate: 0,\n  });\n\n  // TODO: define PDFProps\n  const onSave = (savedProps: any) => {\n    setPdfProps({ ...savedProps });\n  };\n\n  return (\n    <Container>\n      <CodePreview>{JSON.stringify(pdfProps)}</CodePreview>\n      {/* <SettingsController onSave={onSave} /> */}\n      <WidgetTitle>PDF Viewer Preview</WidgetTitle>\n      <WidgetWrapper>\n        <PdfViewer {...pdfProps} />\n      </WidgetWrapper>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  background-color: #afdde9;\n  text-align: center;\n  padding: 3em;\n`;\n\nconst CodePreview = styled.code`\n  padding: 1em;\n  margin-bottom: 1em;\n  color: #f9f9f9;\n  background-color: #222222;\n`;\n\nconst WidgetWrapper = styled.div`\n  border-style: dotted;\n  border-color: #666666;\n  padding: 1em;\n`;\n\nconst WidgetTitle = styled.h2`\n  color: #666666;\n`;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}